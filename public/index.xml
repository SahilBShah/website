<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sahil Shah</title>
    <link>/</link>
    <description>Recent content on Sahil Shah</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 02 Oct 2016 22:55:05 -0400</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Sun, 02 Oct 2016 22:55:05 -0400</pubDate>
      
      <guid>/projects/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/blog/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/blog/2015-07-23-r-rmarkdown/</guid>
      <description>R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/blog/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&#39;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&#39;t cover using CSS to style your theme.
We&#39;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/blog/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/blog/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>/blog/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&#39;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Project 1: Exploratory Data Analysis</title>
      <link>/project1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project1/</guid>
      <description>#Joining dataframes demo &amp;lt;- as.data.frame(MplsDemo) stops &amp;lt;- as.data.frame(MplsStops) stops &amp;lt;- stops %&amp;gt;% pivot_wider(names_from=problem, values_from=preRace) stops &amp;lt;- stops %&amp;gt;% pivot_longer(cols=c(&amp;#39;suspicious&amp;#39;, &amp;#39;traffic&amp;#39;), names_to=&amp;#39;problem&amp;#39;, values_to=&amp;#39;preRace&amp;#39;) fulldata &amp;lt;- right_join(demo, stops) %&amp;gt;% na.omit(col=personSearch) ## Joining, by = &amp;quot;neighborhood&amp;quot; ## Warning: Column `neighborhood` joining character vector and factor, coercing ## into character vector diff_neighborhoods &amp;lt;- anti_join(demo, stops) ## Joining, by = &amp;quot;neighborhood&amp;quot; ## Warning: Column `neighborhood` joining character vector and factor, coercing ## into character vector #Adding variables in the joined dataframe fulldata &amp;lt;- fulldata %&amp;gt;% mutate(white_pop=white*population, black_pop=black*population, foreign_pop=foreignBorn*population, in_poverty=poverty*population, college_educated=collegeGrad*population) fulldata &amp;lt;- fulldata %&amp;gt;% group_by(neighborhood, race) %&amp;gt;% mutate(race_number_of_stops=n()) fulldata &amp;lt;- fulldata %&amp;gt;% group_by(neighborhood, gender) %&amp;gt;% mutate(gender_number_of_stops=n()) The reason I decided to do a right join on the two data frames is because this would provide information about each person and the neighborhood they live in to determine if certain precincts have more arrests in one neighborhood over another and if there is a disproporionate number of arrests based on race or gender.</description>
    </item>
    
    <item>
      <title>Project 2: Modeling</title>
      <link>/project2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project2/</guid>
      <description>Name: Sahil Shah UT EID: sbs2756
library(dplyr) ## ## Attaching package: &amp;#39;dplyr&amp;#39; ## The following objects are masked from &amp;#39;package:stats&amp;#39;: ## ## filter, lag ## The following objects are masked from &amp;#39;package:base&amp;#39;: ## ## intersect, setdiff, setequal, union setwd(&amp;quot;/home/sahil/&amp;quot;) mlb &amp;lt;- read.csv(&amp;quot;mlb.csv&amp;quot;) mlb &amp;lt;- mlb %&amp;gt;% subset(League!=&amp;#39;Both&amp;#39;) Summary of dataset The dataset that I have chosen to use contains the statistics of the top 100 batters in the MLB during the 2014 season.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/</guid>
      <description>Python Projects
Evolutionary Program Utilizing the pinetree simulator: Evolutionary program that automatically evolves genomes based on user’s specifications.
Data Structures and Recursion: Assignments completed in a data structures and algorithms computer science course.
R Projects
Data Wrangling and Exploratory Analysis: Preliminary data analysis on the neighborhood demographics and total arrests in Minneapolis in 2017.
Modeling, Inference, Predition: Statistical modeling of the top 100 batters in the MLB during the 2014 season.</description>
    </item>
    
  </channel>
</rss>